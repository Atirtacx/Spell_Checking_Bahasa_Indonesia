{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyNXAr8WzPu2jWeNVPms09HH",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/Atirtacx/Spell_Checking_Bahasa_Indonesia/blob/main/Created%20spell%20checking%20using%20damerau%20lavenshtein%20distance\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 1,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "AGENfLOzuwC0",
        "outputId": "d6f47f41-16c3-42bd-fa6c-aa3437689a1e"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "kemaren ejaan yang salah. Mungkin Anda maksud: kemarin\n",
            "Runtime untuk kata 'kemaren': 1.05433488 detik\n",
            "\n",
            "ku ejaan yang salah. Mungkin Anda maksud: aku, kau, kiu, kru, kue, kui, kuk, kup, kur, kus, mu\n",
            "Runtime untuk kata 'ku': 0.33827162 detik\n",
            "\n",
            "knalpot ejaan yang benar.\n",
            "Runtime untuk kata 'knalpot': 0.00046492 detik\n",
            "\n",
            "brangkas ejaan yang salah. Mungkin Anda maksud: bangkas, brankas\n",
            "Runtime untuk kata 'brangkas': 1.25185156 detik\n",
            "\n",
            "biskuut ejaan yang salah. Mungkin Anda maksud: biskuit\n",
            "Runtime untuk kata 'biskuut': 1.06760025 detik\n",
            "\n",
            "kemeja ejaan yang benar.\n",
            "Runtime untuk kata 'kemeja': 0.00034690 detik\n",
            "\n",
            "selasa ejaan yang benar.\n",
            "Runtime untuk kata 'selasa': 0.00064301 detik\n",
            "\n",
            "kemna ejaan yang salah. Mungkin Anda maksud: keman, kempa, kena\n",
            "Runtime untuk kata 'kemna': 0.79027176 detik\n",
            "\n",
            "minm ejaan yang salah. Mungkin Anda maksud: mim, min, mina, mini, minim, minum\n",
            "Runtime untuk kata 'minm': 0.66329193 detik\n",
            "\n",
            "siap ejaan yang benar.\n",
            "Runtime untuk kata 'siap': 0.00044751 detik\n",
            "\n"
          ]
        }
      ],
      "source": [
        "import time\n",
        "\n",
        "def load_dictionary(file_path):\n",
        "    \"\"\"\n",
        "    Fungsi untuk memuat kamus dari file teks.\n",
        "    \"\"\"\n",
        "    with open(file_path, \"r\", encoding=\"utf-8\") as f:\n",
        "        dictionary = f.read().splitlines()\n",
        "    return dictionary\n",
        "\n",
        "def damerau_levenshtein_distance(s1, s2):\n",
        "    \"\"\"\n",
        "    Fungsi untuk menghitung jarak Damerau-Levenshtein antara dua string.\n",
        "    \"\"\"\n",
        "    len_s1 = len(s1)\n",
        "    len_s2 = len(s2)\n",
        "    d = [[0 for x in range(len_s2+1)] for y in range(len_s1+1)]\n",
        "    for i in range(len_s1+1):\n",
        "        d[i][0] = i\n",
        "    for j in range(len_s2+1):\n",
        "        d[0][j] = j\n",
        "    for i in range(1, len_s1+1):\n",
        "        for j in range(1, len_s2+1):\n",
        "            if s1[i-1] == s2[j-1]:\n",
        "                cost = 0\n",
        "            else:\n",
        "                cost = 1\n",
        "            d[i][j] = min(d[i-1][j]+1, d[i][j-1]+1, d[i-1][j-1]+cost)\n",
        "            if i > 1 and j > 1 and s1[i-1] == s2[j-2] and s1[i-2] == s2[j-1]:\n",
        "                d[i][j] = min(d[i][j], d[i-2][j-2]+cost)\n",
        "    return d[len_s1][len_s2]\n",
        "\n",
        "def spell_check(word, word_list):\n",
        "    \"\"\"\n",
        "    Fungsi untuk mengecek ejaan kata pada kamus.\n",
        "    \"\"\"\n",
        "    if word in word_list:\n",
        "        return True\n",
        "    return False\n",
        "\n",
        "def spell_correct(word, word_list):\n",
        "    \"\"\"\n",
        "    Fungsi untuk memperbaiki ejaan kata jika salah.\n",
        "    \"\"\"\n",
        "    min_distance = float('inf')\n",
        "    min_word = word\n",
        "    for w in word_list:\n",
        "        distance = damerau_levenshtein_distance(word, w)\n",
        "        if distance < min_distance:\n",
        "            min_distance = distance\n",
        "            min_word = w\n",
        "    return min_word\n",
        "\n",
        "def spell_suggest(word, word_list):\n",
        "    \"\"\"\n",
        "    Fungsi untuk memberikan saran kata jika kata yang dimasukkan tidak ditemukan dalam kamus.\n",
        "    \"\"\"\n",
        "    suggestions = []\n",
        "    for w in word_list:\n",
        "        distance = damerau_levenshtein_distance(word, w)\n",
        "        if distance == 1:\n",
        "            suggestions.append(w)\n",
        "    return suggestions\n",
        "\n",
        "# Kamus\n",
        "file_path = \"kata-dasar.txt\"\n",
        "word_list = load_dictionary(file_path)\n",
        "\n",
        "# Kata-kata uji\n",
        "words_to_check = ['kemaren', \n",
        "                  'ku', \n",
        "                  'knalpot', \n",
        "                  'brangkas', \n",
        "                  'biskuut', \n",
        "                  'kemeja', \n",
        "                  'selasa', \n",
        "                  'kemna', \n",
        "                  'minm', \n",
        "                  'siap']\n",
        "\n",
        "# Spell checking, spell correction, dan spell suggestion\n",
        "for word in words_to_check:\n",
        "    start_time = time.time()\n",
        "\n",
        "    # Spell checking\n",
        "    if spell_check(word, word_list):\n",
        "        print(f\"{word} ejaan yang benar.\")\n",
        "    else:\n",
        "        # Spell suggestion\n",
        "        suggestions = spell_suggest(word, word_list)\n",
        "        if suggestions:\n",
        "            print(f\"{word} ejaan yang salah. Mungkin Anda maksud: {', '.join(suggestions)}\")\n",
        "        else:\n",
        "            # Spell correction\n",
        "            correction = spell_correct(word, word_list)\n",
        "            print(f\"{word} ejaan yang salah. Mungkin yang dimaksud adalah: {correction}\")\n",
        "\n",
        "    end_time = time.time()\n",
        "    runtime = end_time - start_time\n",
        "    print(f\"Runtime untuk kata '{word}': {runtime:.8f} detik\")\n",
        "    print()\n"
      ]
    }
  ]
}